/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 0.4.0.0
 */

using System.Collections.Generic;
using Hime.Redist.Parsers;

namespace Parsers.Portrait
{
    public class EventReaderParser : BaseRNGLR1Parser
    {
        public static readonly SymbolVariable[] variables = {
            new SymbolVariable(0x12, "idOption"), 
            new SymbolVariable(0x13, "boolOption"), 
            new SymbolVariable(0x14, "stringOption"), 
            new SymbolVariable(0x15, "numberOption"), 
            new SymbolVariable(0x16, "groupOption"), 
            new SymbolVariable(0x17, "colourGroup"), 
            new SymbolVariable(0x18, "layerGroup"), 
            new SymbolVariable(0x19, "cultureGroup"), 
            new SymbolVariable(0x1A, "Option"), 
            new SymbolVariable(0x1B, "Sprite"), 
            new SymbolVariable(0x1C, "Start"), 
            new SymbolVariable(0x1D, "_v15203585"), 
            new SymbolVariable(0x1E, "_v5DB466CA"), 
            new SymbolVariable(0x1F, "_vF79C6B7"), 
            new SymbolVariable(0x20, "_v2F9852D2"), 
            new SymbolVariable(0x21, "_v682FE33F"), 
            new SymbolVariable(0x22, "_Axiom_") };
        private static void Production_12_0 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            family.AddChild(nodes[0]);
            nodes[1].Action = SyntaxTreeNodeAction.Drop;
            family.AddChild(nodes[1]);
            family.AddChild(nodes[2]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_13_0 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            family.AddChild(nodes[0]);
            nodes[1].Action = SyntaxTreeNodeAction.Drop;
            family.AddChild(nodes[1]);
            family.AddChild(nodes[2]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_14_0 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            family.AddChild(nodes[0]);
            nodes[1].Action = SyntaxTreeNodeAction.Drop;
            family.AddChild(nodes[1]);
            family.AddChild(nodes[2]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_15_0 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            family.AddChild(nodes[0]);
            nodes[1].Action = SyntaxTreeNodeAction.Drop;
            family.AddChild(nodes[1]);
            family.AddChild(nodes[2]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_16_0 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            family.AddChild(nodes[0]);
            nodes[1].Action = SyntaxTreeNodeAction.Drop;
            family.AddChild(nodes[1]);
            nodes[2].Action = SyntaxTreeNodeAction.Drop;
            family.AddChild(nodes[2]);
            nodes[3].Action = SyntaxTreeNodeAction.Drop;
            family.AddChild(nodes[3]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_16_1 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            family.AddChild(nodes[0]);
            nodes[1].Action = SyntaxTreeNodeAction.Drop;
            family.AddChild(nodes[1]);
            nodes[2].Action = SyntaxTreeNodeAction.Drop;
            family.AddChild(nodes[2]);
            family.AddChild(nodes[3]);
            nodes[4].Action = SyntaxTreeNodeAction.Drop;
            family.AddChild(nodes[4]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_17_0 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            nodes[0].Action = SyntaxTreeNodeAction.Drop;
            family.AddChild(nodes[0]);
            family.AddChild(nodes[1]);
            family.AddChild(nodes[2]);
            family.AddChild(nodes[3]);
            nodes[4].Action = SyntaxTreeNodeAction.Drop;
            family.AddChild(nodes[4]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_18_0 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            nodes[0].Action = SyntaxTreeNodeAction.Drop;
            family.AddChild(nodes[0]);
            nodes[1].Action = SyntaxTreeNodeAction.Drop;
            family.AddChild(nodes[1]);
            nodes[2].Action = SyntaxTreeNodeAction.Drop;
            family.AddChild(nodes[2]);
            family.AddChild(nodes[3]);
            nodes[4].Action = SyntaxTreeNodeAction.Drop;
            family.AddChild(nodes[4]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_19_0 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            nodes[0].Action = SyntaxTreeNodeAction.Drop;
            family.AddChild(nodes[0]);
            nodes[1].Action = SyntaxTreeNodeAction.Drop;
            family.AddChild(nodes[1]);
            nodes[2].Action = SyntaxTreeNodeAction.Drop;
            family.AddChild(nodes[2]);
            family.AddChild(nodes[3]);
            nodes[4].Action = SyntaxTreeNodeAction.Drop;
            family.AddChild(nodes[4]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_1A_0 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            family.AddChild(nodes[0]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_1A_1 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            family.AddChild(nodes[0]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_1A_2 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            family.AddChild(nodes[0]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_1A_3 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            family.AddChild(nodes[0]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_1A_4 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            nodes[0].Action = SyntaxTreeNodeAction.Promote;
            family.AddChild(nodes[0]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_1A_5 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            nodes[0].Action = SyntaxTreeNodeAction.Promote;
            family.AddChild(nodes[0]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_1A_6 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            nodes[0].Action = SyntaxTreeNodeAction.Promote;
            family.AddChild(nodes[0]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_1A_7 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            nodes[0].Action = SyntaxTreeNodeAction.Promote;
            family.AddChild(nodes[0]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_1B_0 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            family.AddChild(nodes[0]);
            nodes[1].Action = SyntaxTreeNodeAction.Drop;
            family.AddChild(nodes[1]);
            nodes[2].Action = SyntaxTreeNodeAction.Drop;
            family.AddChild(nodes[2]);
            family.AddChild(nodes[3]);
            nodes[4].Action = SyntaxTreeNodeAction.Drop;
            family.AddChild(nodes[4]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_1C_0 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_1C_1 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            family.AddChild(nodes[0]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_1D_0 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            root.Action = SyntaxTreeNodeAction.Replace;
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            family.AddChild(nodes[0]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_1D_1 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            root.Action = SyntaxTreeNodeAction.Replace;
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            family.AddChild(nodes[0]);
            family.AddChild(nodes[1]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_1E_0 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            root.Action = SyntaxTreeNodeAction.Replace;
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            family.AddChild(nodes[0]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_1E_1 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            root.Action = SyntaxTreeNodeAction.Replace;
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            family.AddChild(nodes[0]);
            family.AddChild(nodes[1]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_1F_0 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            root.Action = SyntaxTreeNodeAction.Replace;
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            family.AddChild(nodes[0]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_1F_1 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            root.Action = SyntaxTreeNodeAction.Replace;
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            family.AddChild(nodes[0]);
            family.AddChild(nodes[1]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_20_0 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            root.Action = SyntaxTreeNodeAction.Replace;
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            family.AddChild(nodes[0]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_20_1 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            root.Action = SyntaxTreeNodeAction.Replace;
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            family.AddChild(nodes[0]);
            family.AddChild(nodes[1]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_21_0 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            root.Action = SyntaxTreeNodeAction.Replace;
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            family.AddChild(nodes[0]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_21_1 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            root.Action = SyntaxTreeNodeAction.Replace;
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            family.AddChild(nodes[0]);
            family.AddChild(nodes[1]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static void Production_22_0 (BaseRNGLR1Parser parser, SPPFNode root, List<SPPFNode> nodes)
        {
            SPPFNodeFamily family = new SPPFNodeFamily(root);
            nodes[0].Action = SyntaxTreeNodeAction.Promote;
            family.AddChild(nodes[0]);
            nodes[1].Action = SyntaxTreeNodeAction.Drop;
            family.AddChild(nodes[1]);
            if (!root.HasEquivalentFamily(family)) root.AddFamily(family);
        }
        private static Rule[] staticRules = {
           new Rule(Production_12_0, variables[0])
           , new Rule(Production_13_0, variables[1])
           , new Rule(Production_14_0, variables[2])
           , new Rule(Production_15_0, variables[3])
           , new Rule(Production_16_0, variables[4])
           , new Rule(Production_16_1, variables[4])
           , new Rule(Production_17_0, variables[5])
           , new Rule(Production_18_0, variables[6])
           , new Rule(Production_19_0, variables[7])
           , new Rule(Production_1A_0, variables[8])
           , new Rule(Production_1A_1, variables[8])
           , new Rule(Production_1A_2, variables[8])
           , new Rule(Production_1A_3, variables[8])
           , new Rule(Production_1A_4, variables[8])
           , new Rule(Production_1A_5, variables[8])
           , new Rule(Production_1A_6, variables[8])
           , new Rule(Production_1A_7, variables[8])
           , new Rule(Production_1B_0, variables[9])
           , new Rule(Production_1C_0, variables[10])
           , new Rule(Production_1C_1, variables[10])
           , new Rule(Production_1D_0, variables[11])
           , new Rule(Production_1D_1, variables[11])
           , new Rule(Production_1E_0, variables[12])
           , new Rule(Production_1E_1, variables[12])
           , new Rule(Production_1F_0, variables[13])
           , new Rule(Production_1F_1, variables[13])
           , new Rule(Production_20_0, variables[14])
           , new Rule(Production_20_1, variables[14])
           , new Rule(Production_21_0, variables[15])
           , new Rule(Production_21_1, variables[15])
           , new Rule(Production_22_0, variables[16])
        };
        private static SPPFNode[] staticNullVarsSPPF = { new SPPFNode(variables[10], 0) };
        private static SPPFNode[] staticNullChoicesSPPF = { new SPPFNode(null, 0, SyntaxTreeNodeAction.Replace) };
        private static void BuildNullables() { 
            List<SPPFNode> temp = new List<SPPFNode>();
            staticNullChoicesSPPF[0].AddFamily(temp);
            temp.Clear();
            staticNullVarsSPPF[0].AddFamily(temp);
            temp.Clear();
        }
        static EventReaderParser()
        {
            BuildNullables();
        }
        private static State[] staticStates = {
            new State(
               null,
               new SymbolTerminal[2] {EventReaderLexer.terminals[1], EventReaderLexer.terminals[7]},
               new ushort[1] {0xb},
               new ushort[1] {0x4},
               new ushort[3] {0x1c, 0x21, 0x1b},
               new ushort[3] {0x1, 0x2, 0x3},
               new Reduction[1] {new Reduction(0x2, staticRules[0x12], 0x0, staticNullVarsSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[1] {EventReaderLexer.terminals[1]},
               new ushort[1] {0x2},
               new ushort[1] {0x5},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[0] {})
            , new State(
               null,
               new SymbolTerminal[2] {EventReaderLexer.terminals[1], EventReaderLexer.terminals[7]},
               new ushort[1] {0xb},
               new ushort[1] {0x4},
               new ushort[1] {0x1b},
               new ushort[1] {0x6},
               new Reduction[1] {new Reduction(0x2, staticRules[0x13], 0x1, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[2] {EventReaderLexer.terminals[1], EventReaderLexer.terminals[7]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[2] {new Reduction(0x2, staticRules[0x1C], 0x1, staticNullChoicesSPPF[0x0]), new Reduction(0xb, staticRules[0x1C], 0x1, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[1] {EventReaderLexer.terminals[3]},
               new ushort[1] {0x7},
               new ushort[1] {0x7},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[0] {})
            , new State(
               null,
               new SymbolTerminal[1] {EventReaderLexer.terminals[0]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[1] {new Reduction(0x1, staticRules[0x1E], 0x2, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[2] {EventReaderLexer.terminals[1], EventReaderLexer.terminals[7]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[2] {new Reduction(0x2, staticRules[0x1D], 0x2, staticNullChoicesSPPF[0x0]), new Reduction(0xb, staticRules[0x1D], 0x2, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[1] {EventReaderLexer.terminals[4]},
               new ushort[1] {0x8},
               new ushort[1] {0x8},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[0] {})
            , new State(
               null,
               new SymbolTerminal[2] {EventReaderLexer.terminals[4], EventReaderLexer.terminals[7]},
               new ushort[2] {0xb, 0x8},
               new ushort[2] {0x13, 0x14},
               new ushort[10] {0x20, 0x1a, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19},
               new ushort[10] {0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12},
               new Reduction[0] {})
            , new State(
               null,
               new SymbolTerminal[3] {EventReaderLexer.terminals[4], EventReaderLexer.terminals[5], EventReaderLexer.terminals[7]},
               new ushort[3] {0x9, 0xb, 0x8},
               new ushort[3] {0x15, 0x13, 0x14},
               new ushort[9] {0x1a, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19},
               new ushort[9] {0x16, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12},
               new Reduction[0] {})
            , new State(
               null,
               new SymbolTerminal[3] {EventReaderLexer.terminals[4], EventReaderLexer.terminals[5], EventReaderLexer.terminals[7]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[3] {new Reduction(0x8, staticRules[0x1A], 0x1, staticNullChoicesSPPF[0x0]), new Reduction(0x9, staticRules[0x1A], 0x1, staticNullChoicesSPPF[0x0]), new Reduction(0xb, staticRules[0x1A], 0x1, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[3] {EventReaderLexer.terminals[4], EventReaderLexer.terminals[5], EventReaderLexer.terminals[7]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[3] {new Reduction(0x8, staticRules[0x9], 0x1, staticNullChoicesSPPF[0x0]), new Reduction(0x9, staticRules[0x9], 0x1, staticNullChoicesSPPF[0x0]), new Reduction(0xb, staticRules[0x9], 0x1, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[3] {EventReaderLexer.terminals[4], EventReaderLexer.terminals[5], EventReaderLexer.terminals[7]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[3] {new Reduction(0x8, staticRules[0xA], 0x1, staticNullChoicesSPPF[0x0]), new Reduction(0x9, staticRules[0xA], 0x1, staticNullChoicesSPPF[0x0]), new Reduction(0xb, staticRules[0xA], 0x1, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[3] {EventReaderLexer.terminals[4], EventReaderLexer.terminals[5], EventReaderLexer.terminals[7]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[3] {new Reduction(0x8, staticRules[0xB], 0x1, staticNullChoicesSPPF[0x0]), new Reduction(0x9, staticRules[0xB], 0x1, staticNullChoicesSPPF[0x0]), new Reduction(0xb, staticRules[0xB], 0x1, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[3] {EventReaderLexer.terminals[4], EventReaderLexer.terminals[5], EventReaderLexer.terminals[7]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[3] {new Reduction(0x8, staticRules[0xC], 0x1, staticNullChoicesSPPF[0x0]), new Reduction(0x9, staticRules[0xC], 0x1, staticNullChoicesSPPF[0x0]), new Reduction(0xb, staticRules[0xC], 0x1, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[3] {EventReaderLexer.terminals[4], EventReaderLexer.terminals[5], EventReaderLexer.terminals[7]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[3] {new Reduction(0x8, staticRules[0xD], 0x1, staticNullChoicesSPPF[0x0]), new Reduction(0x9, staticRules[0xD], 0x1, staticNullChoicesSPPF[0x0]), new Reduction(0xb, staticRules[0xD], 0x1, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[3] {EventReaderLexer.terminals[4], EventReaderLexer.terminals[5], EventReaderLexer.terminals[7]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[3] {new Reduction(0x8, staticRules[0xE], 0x1, staticNullChoicesSPPF[0x0]), new Reduction(0x9, staticRules[0xE], 0x1, staticNullChoicesSPPF[0x0]), new Reduction(0xb, staticRules[0xE], 0x1, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[3] {EventReaderLexer.terminals[4], EventReaderLexer.terminals[5], EventReaderLexer.terminals[7]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[3] {new Reduction(0x8, staticRules[0xF], 0x1, staticNullChoicesSPPF[0x0]), new Reduction(0x9, staticRules[0xF], 0x1, staticNullChoicesSPPF[0x0]), new Reduction(0xb, staticRules[0xF], 0x1, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[3] {EventReaderLexer.terminals[4], EventReaderLexer.terminals[5], EventReaderLexer.terminals[7]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[3] {new Reduction(0x8, staticRules[0x10], 0x1, staticNullChoicesSPPF[0x0]), new Reduction(0x9, staticRules[0x10], 0x1, staticNullChoicesSPPF[0x0]), new Reduction(0xb, staticRules[0x10], 0x1, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[1] {EventReaderLexer.terminals[3]},
               new ushort[1] {0x7},
               new ushort[1] {0x17},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[0] {})
            , new State(
               null,
               new SymbolTerminal[1] {EventReaderLexer.terminals[2]},
               new ushort[1] {0x6},
               new ushort[1] {0x18},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[0] {})
            , new State(
               null,
               new SymbolTerminal[2] {EventReaderLexer.terminals[1], EventReaderLexer.terminals[7]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[2] {new Reduction(0x2, staticRules[0x11], 0x5, staticNullChoicesSPPF[0x0]), new Reduction(0xb, staticRules[0x11], 0x5, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[3] {EventReaderLexer.terminals[4], EventReaderLexer.terminals[5], EventReaderLexer.terminals[7]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[3] {new Reduction(0x8, staticRules[0x1B], 0x2, staticNullChoicesSPPF[0x0]), new Reduction(0x9, staticRules[0x1B], 0x2, staticNullChoicesSPPF[0x0]), new Reduction(0xb, staticRules[0x1B], 0x2, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[5] {EventReaderLexer.terminals[2], EventReaderLexer.terminals[4], EventReaderLexer.terminals[7], EventReaderLexer.terminals[8], EventReaderLexer.terminals[9]},
               new ushort[5] {0xb, 0xd, 0xc, 0x6, 0x8},
               new ushort[5] {0x19, 0x1A, 0x1B, 0x1C, 0x1D},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[0] {})
            , new State(
               null,
               new SymbolTerminal[1] {EventReaderLexer.terminals[2]},
               new ushort[1] {0x6},
               new ushort[1] {0x1E},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[0] {})
            , new State(
               null,
               new SymbolTerminal[3] {EventReaderLexer.terminals[4], EventReaderLexer.terminals[5], EventReaderLexer.terminals[7]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[3] {new Reduction(0x8, staticRules[0x0], 0x3, staticNullChoicesSPPF[0x0]), new Reduction(0x9, staticRules[0x0], 0x3, staticNullChoicesSPPF[0x0]), new Reduction(0xb, staticRules[0x0], 0x3, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[3] {EventReaderLexer.terminals[4], EventReaderLexer.terminals[5], EventReaderLexer.terminals[7]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[3] {new Reduction(0x8, staticRules[0x1], 0x3, staticNullChoicesSPPF[0x0]), new Reduction(0x9, staticRules[0x1], 0x3, staticNullChoicesSPPF[0x0]), new Reduction(0xb, staticRules[0x1], 0x3, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[3] {EventReaderLexer.terminals[4], EventReaderLexer.terminals[5], EventReaderLexer.terminals[7]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[3] {new Reduction(0x8, staticRules[0x2], 0x3, staticNullChoicesSPPF[0x0]), new Reduction(0x9, staticRules[0x2], 0x3, staticNullChoicesSPPF[0x0]), new Reduction(0xb, staticRules[0x2], 0x3, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[3] {EventReaderLexer.terminals[4], EventReaderLexer.terminals[5], EventReaderLexer.terminals[7]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[3] {new Reduction(0x8, staticRules[0x3], 0x3, staticNullChoicesSPPF[0x0]), new Reduction(0x9, staticRules[0x3], 0x3, staticNullChoicesSPPF[0x0]), new Reduction(0xb, staticRules[0x3], 0x3, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[5] {EventReaderLexer.terminals[2], EventReaderLexer.terminals[4], EventReaderLexer.terminals[5], EventReaderLexer.terminals[7], EventReaderLexer.terminals[8]},
               new ushort[5] {0x9, 0xc, 0x6, 0xb, 0x8},
               new ushort[5] {0x1F, 0x24, 0x25, 0x13, 0x14},
               new ushort[12] {0x1d, 0x1e, 0x1f, 0x1a, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19},
               new ushort[12] {0x20, 0x21, 0x22, 0x23, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12},
               new Reduction[0] {})
            , new State(
               null,
               new SymbolTerminal[1] {EventReaderLexer.terminals[2]},
               new ushort[1] {0x6},
               new ushort[1] {0x26},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[0] {})
            , new State(
               null,
               new SymbolTerminal[3] {EventReaderLexer.terminals[4], EventReaderLexer.terminals[5], EventReaderLexer.terminals[7]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[3] {new Reduction(0x8, staticRules[0x4], 0x4, staticNullChoicesSPPF[0x0]), new Reduction(0x9, staticRules[0x4], 0x4, staticNullChoicesSPPF[0x0]), new Reduction(0xb, staticRules[0x4], 0x4, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[3] {EventReaderLexer.terminals[4], EventReaderLexer.terminals[5], EventReaderLexer.terminals[7]},
               new ushort[3] {0x9, 0xb, 0x8},
               new ushort[3] {0x27, 0x13, 0x14},
               new ushort[9] {0x1a, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19},
               new ushort[9] {0x28, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12},
               new Reduction[0] {})
            , new State(
               null,
               new SymbolTerminal[2] {EventReaderLexer.terminals[5], EventReaderLexer.terminals[8]},
               new ushort[2] {0x9, 0xc},
               new ushort[2] {0x29, 0x2A},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[0] {})
            , new State(
               null,
               new SymbolTerminal[2] {EventReaderLexer.terminals[2], EventReaderLexer.terminals[5]},
               new ushort[2] {0x9, 0x6},
               new ushort[2] {0x2B, 0x2C},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[0] {})
            , new State(
               null,
               new SymbolTerminal[3] {EventReaderLexer.terminals[4], EventReaderLexer.terminals[5], EventReaderLexer.terminals[7]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[3] {new Reduction(0x8, staticRules[0x14], 0x1, staticNullChoicesSPPF[0x0]), new Reduction(0x9, staticRules[0x14], 0x1, staticNullChoicesSPPF[0x0]), new Reduction(0xb, staticRules[0x14], 0x1, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[2] {EventReaderLexer.terminals[5], EventReaderLexer.terminals[8]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[2] {new Reduction(0x9, staticRules[0x16], 0x1, staticNullChoicesSPPF[0x0]), new Reduction(0xc, staticRules[0x16], 0x1, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[2] {EventReaderLexer.terminals[2], EventReaderLexer.terminals[5]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[2] {new Reduction(0x6, staticRules[0x18], 0x1, staticNullChoicesSPPF[0x0]), new Reduction(0x9, staticRules[0x18], 0x1, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[1] {EventReaderLexer.terminals[5]},
               new ushort[1] {0x9},
               new ushort[1] {0x2D},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[0] {})
            , new State(
               null,
               new SymbolTerminal[3] {EventReaderLexer.terminals[4], EventReaderLexer.terminals[5], EventReaderLexer.terminals[7]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[3] {new Reduction(0x8, staticRules[0x5], 0x5, staticNullChoicesSPPF[0x0]), new Reduction(0x9, staticRules[0x5], 0x5, staticNullChoicesSPPF[0x0]), new Reduction(0xb, staticRules[0x5], 0x5, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[3] {EventReaderLexer.terminals[4], EventReaderLexer.terminals[5], EventReaderLexer.terminals[7]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[3] {new Reduction(0x8, staticRules[0x15], 0x2, staticNullChoicesSPPF[0x0]), new Reduction(0x9, staticRules[0x15], 0x2, staticNullChoicesSPPF[0x0]), new Reduction(0xb, staticRules[0x15], 0x2, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[3] {EventReaderLexer.terminals[4], EventReaderLexer.terminals[5], EventReaderLexer.terminals[7]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[3] {new Reduction(0x8, staticRules[0x7], 0x5, staticNullChoicesSPPF[0x0]), new Reduction(0x9, staticRules[0x7], 0x5, staticNullChoicesSPPF[0x0]), new Reduction(0xb, staticRules[0x7], 0x5, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[2] {EventReaderLexer.terminals[5], EventReaderLexer.terminals[8]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[2] {new Reduction(0x9, staticRules[0x17], 0x2, staticNullChoicesSPPF[0x0]), new Reduction(0xc, staticRules[0x17], 0x2, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[3] {EventReaderLexer.terminals[4], EventReaderLexer.terminals[5], EventReaderLexer.terminals[7]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[3] {new Reduction(0x8, staticRules[0x8], 0x5, staticNullChoicesSPPF[0x0]), new Reduction(0x9, staticRules[0x8], 0x5, staticNullChoicesSPPF[0x0]), new Reduction(0xb, staticRules[0x8], 0x5, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[2] {EventReaderLexer.terminals[2], EventReaderLexer.terminals[5]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[2] {new Reduction(0x6, staticRules[0x19], 0x2, staticNullChoicesSPPF[0x0]), new Reduction(0x9, staticRules[0x19], 0x2, staticNullChoicesSPPF[0x0])})
            , new State(
               null,
               new SymbolTerminal[3] {EventReaderLexer.terminals[4], EventReaderLexer.terminals[5], EventReaderLexer.terminals[7]},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new ushort[0] {},
               new Reduction[3] {new Reduction(0x8, staticRules[0x6], 0x5, staticNullChoicesSPPF[0x0]), new Reduction(0x9, staticRules[0x6], 0x5, staticNullChoicesSPPF[0x0]), new Reduction(0xb, staticRules[0x6], 0x5, staticNullChoicesSPPF[0x0])})
        };
        protected override void setup()
        {
            nullVarsSPPF = staticNullVarsSPPF;
            nullChoicesSPPF = staticNullChoicesSPPF;
            rules = staticRules;
            states = staticStates;
            axiomID = 0x1C;
            axiomNullSPPF = 0x0;
            axiomPrimeID = 0x22;
        }
        public EventReaderParser(EventReaderLexer lexer) : base (lexer) {  }
    }
}
